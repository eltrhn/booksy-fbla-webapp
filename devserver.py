import asyncio
import itertools
import os
import struct
from concurrent.futures import ProcessPoolExecutor
from glob import glob
from urllib import parse

import aiohttp
import aioredis
import asyncpg
import sanic
import urllib
import uvloop
import sanic_jwt as jwt
from sanic_jwt import decorators as jwtdec
from sanic import Sanic

from backend import setup, deco
from backend.typedef import Location, Role, MediaItem, MediaType, User
from backend.blueprints import bp

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy()) # make it go faster <3

# Create a Sanic application for this file.
app = Sanic('Booksy')

# "Blueprints", i.e. separate files containing endpoint info to
# avoid clogging up this main file.
# They can be found in ./backend/blueprints
app.blueprint(bp)

RTD = {} # refresh token dict

async def authenticate(rqst, *args, **kwargs):
    """
    /auth
    Authenticate a user's credentials through sanic-jwt to give them
    access to the application.
    """
    try:
        # standard fare. get username and password from the app's request
        username = rqst.json['user_id'].lower()
        password = rqst.json['password'].encode('utf-8')
        lid = int(rqst.json['lid'])
    except KeyError:
        # this will always be handled client-side regardless, but...
        # ...just in case, I guess
        raise jwt.exceptions.AuthenticationFailed('Missing username or password.')
    # look up the username/pw pair in the database
    async with app.acquire() as conn:
        query = """SELECT pwhash FROM members WHERE lid = $1::bigint AND username = $2::text"""
        pwhash = await conn.fetchval(query, lid, username)
    bvalid = True#await app.aexec(app.ppe, bcrypt.checkpw, password, pwhash)
    if False:
            # (we shouldn't specify which of pw/username is invalid lest an attacker
            # use the info to enumerate possible passwords/usernames)
            return False # unverified
    return await User.from_identifiers(username=username, lid=lid, app=rqst.app)

async def retrieve_user(rqst, payload, *args, **kwargs):
    """/auth/me"""
    if payload:
        uid = payload.get('user_id', None)
        return await User(uid, rqst.app)
    else:
        return None

async def store_rtoken(user_id, refresh_token, *args, **kwargs):
    """/auth/refresh"""
    RTD[user_id] = refresh_token

async def retrieve_rtoken(user_id, *args, **kwargs):
    """/auth/refresh"""
    return RTD.get(user_id, None)

async def revoke_rtoken(user_id, *args, **kwargs):
    """/auth/logout"""
    try:
      RTD.pop(user_id)
    except KeyError:
      pass

# Initialize with JSON Web Token (JWT) authentication for logins.
# First argument passed is the Sanic app object, and subsequent
# parameters are helper functions for authentication & security.
jwt.initialize(app,
  authenticate=authenticate,
  retrieve_user=retrieve_user, # could probably be a lambda but meh
  store_refresh_token=store_rtoken,
  retrieve_refresh_token=retrieve_rtoken,
  revoke_refresh_token=revoke_rtoken)

# Config variables for JWT authentication. See sanic-jwt docs on GitHub
# for more info, or the README.md on my own fork bc I added some stuff
app.config.SANIC_JWT_COOKIE_SET = True # Store token in cookies instead of making the client webapp send them
                                       # ...this may also open things up for XSRF. but I don't know enough about
                                       # that to be sure regarding how to deal with or ameliorate it
app.config.SANIC_JWT_REFRESH_TOKEN_ENABLED = True
app.config.SANIC_JWT_SECRET = os.getenv('SANIC_JWT_SECRET', 'sec') # it's a secret to everybody!
app.config.SANIC_JWT_CLAIM_IAT = True # perhaps for long sessions
# app.config.SANIC_JWT_CLAIM_NBF = True # why not, more security
# app.config.SANIC_JWT_CLAIM_NBF_DELTA = 2 # token becomes checkable 2s after creation

# Get the filenames generated by Angular's AOT build
# (could probably slim this down, sort of just threw stuff together until it worked)
olddir = os.getcwd()
os.chdir('/home/hadi/booksy-db/dist')
# filenames = ('index.html', 'styles*.css', 'inline*.js', 'main*.js', 'polyfills*.js')
filenames = ('index.html', 'inline*.js', 'inline*.map', 'main*.js', 'main*.map', 'polyfills*.js', 'polyfills*.map', 'styles*.js', 'styles*.map', 'vendor*.js', 'vendor*.map')
relative = [glob(i) for i in filenames]
os.chdir(olddir)
absolute = [glob(i) for i in map('/home/hadi/booksy-db/dist/'.__add__, filenames)]
for rel, absol in zip(relative, absolute):
    app.static(rel[0], absol[0]) # Route user requests to Angular's files

@app.listener('before_server_start')
async def set_up_dbs(app, loop):
    """
    Establishes a connection to the environment's Postgres and Redis DBs
    for use in (first) authenticating and (then) storing refresh tokens.
    """
    app.pg_pool = await asyncpg.create_pool(dsn=os.getenv('DATABASE_URL'), max_size=15, loop=loop)
    app.acquire = app.pg_pool.acquire
    #async with app.acquire() as conn:
    #    await setup.create_pg_tables(conn)
    
    app.session = aiohttp.ClientSession()
    app.sem = asyncio.Semaphore(4, loop=loop) # limit concurrency of aiohttp requests to Google Books
    app.filesem = asyncio.Semaphore(255, loop=loop) # limit concurrency of file reads without forcing one at a time
    
    app.ppe = ProcessPoolExecutor(4)
    app.aexec = loop.run_in_executor    # ensure the aiolocks' being set up
    
    [T._init_lock(loop) for T in (Location, Role, MediaItem, MediaType, User)]
    if os.getenv('REDIS_URL', None) is None: # can't do nothin bout this
        app.config.SANIC_JWT_REFRESH_TOKEN_ENABLED = True # bc using dict on this dev server
    else:
        app.rd_pool = await aioredis.create_pool(
                        os.getenv('REDIS_URL'),
                        minsize=5,
                        maxsize=15,
                        loop=loop)

@app.listener('before_server_stop')
async def close_dbs(app, loop):
    """
    Gracefully close all acquired connections before closing.
    """
    await app.pg_pool.close()
    await app.session.close()
    print('Shutting down.')

@app.middleware('request')
async def force_angular(rqst):
    safe = ('?', '.html', '.js', '.ts', '/auth', 'auth/', 'api/', 'stock/')
    if not any(i in rqst.url for i in safe):
        try:
            url = rqst.url[3+rqst.url.find('://'):]
            return sanic.response.redirect('/index.html/?redirect=' + urllib.parse.quote(url.split('/', 1)[1]))
        except IndexError:
            return sanic.response.redirect('/index.html')

'''
@app.route('/')
async def handle_homepage(rqst):
    return sanic.response.redirect('/index.html')

@app.route('/<path:[^?]+>')
async def redirect_to_index(rqst, path):
    """
    A jury-rigged solution to the thing with Angular's PathLocationStrategy
    routing.
    """
    return sanic.response.redirect(f'/index.html/?redirect={urllib.parse.quote(path)}')
'''

# more than 1 worker and you get too many DB connections :((
app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8000)), debug=True, access_log=True, workers=1)
